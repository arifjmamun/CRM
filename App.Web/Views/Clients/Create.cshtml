@model App.Entity.Models.ClientInfo

@{
    ViewBag.Title = "Add New Client";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section AdditionalStyles
{
    <link href="~/vendor/bootstrap-datepicker/dist/css/bootstrap-datepicker.min.css" rel="stylesheet" />
}
<div class="card">
    <h6 class="card-header bg-primary">CLIENTS / ADD NEW</h6>
    <div class="card-block">
        @using (Html.BeginForm("Create", "Clients", FormMethod.Post, new { @class = "form-horizontal" }))
        {
            @Html.AntiForgeryToken()


            <div class="form-group row">
                @Html.LabelFor(model => model.BranchId, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.BranchId, (SelectList)ViewBag.BranchList, "Select One", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.BranchId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.ReferralType, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.ReferralType, (SelectList)ViewBag.ReferralTypes, "Select One", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ReferralType, "", new { @class = "text-danger" })
                </div>
            </div>

            <div id="ReferralAdditional"> </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.SmsNo, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.EditorFor(model => model.SmsNo, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.SmsNo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.Label("Require Supplier", htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.DropDownList("RequireSupplier", (SelectList)ViewBag.IsRequireSupplier, new { @class = "form-control", @required = "required" })
                    @Html.ValidationMessage("RequireSupplier", "", new { @class = "text-danger" })
                </div>
            </div>

            <div id="SupplierAdditional"> </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.ServiceId, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.ServiceId, (SelectList)ViewBag.ServiceList, "Select One", new { @class = "form-control", })
                    @Html.ValidationMessageFor(model => model.ServiceId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div id="ServiceAdditional">
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.ServiceCharge, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.EditorFor(model => model.ServiceCharge, new { htmlAttributes = new { @class = "form-control", @type = "number" } })
                    @Html.ValidationMessageFor(model => model.ServiceCharge, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.Cost, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.EditorFor(model => model.Cost, new { htmlAttributes = new { @class = "form-control", @type = "number" } })
                    @Html.ValidationMessageFor(model => model.Cost, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.Profit, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.EditorFor(model => model.Profit, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @type = "number", @value = "0" } })
                    @Html.ValidationMessageFor(model => model.Profit, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.DoneBy, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.EditorFor(model => model.DoneBy, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DoneBy, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.Remark, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.TextAreaFor(model => model.Remark, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                <div class="offset-sm-4 col-sm-4">
                    <button type="submit" class="btn btn-success pull-right"> <span class="fa fa-plus"></span> Add New </button>
                </div>
            </div>
        }
        <div class="col-md-3">
            <a href="@Url.Action("Index")" class="btn btn-info"> <span class="fa fa-chevron-left"></span> Back to List</a>
        </div>

    </div>
</div>

@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/vendor/bootstrap-datepicker/dist/js/bootstrap-datepicker.min.js"></script>
    <script>
        $(".pickDate").datepicker();
        $("#ReferralType").on("change", function() {
            var referralType = $(this).val();
            if (referralType !== "") {
                $.post("@Url.Action("GetAdditionalReferralFields", "Clients")", { referralType: referralType }, function(html) {
                    // ReSharper disable once QualifiedExpressionMaybeNull
                    if (html !== null && html.message !== undefined) {
                        $("#ReferralAdditional").empty().html(html.message).slideDown(1000);
                    } else {
                        $("#ReferralAdditional").empty().slideUp(1000);
                    }
                });
            } else {
                $("#ReferralAdditional").empty().slideUp(1000);
            }
        });

        $("#RequireSupplier").on("change", function() {
            var requireSupplier = $(this).val();
            if (requireSupplier !== "" && Number(requireSupplier) === 1) {
                $.post("@Url.Action("GetAdditionalSupplierFields", "Clients")", { requireSupplier: requireSupplier }, function(html) {
                    // ReSharper disable once QualifiedExpressionMaybeNull
                    if (html !== null && html.message !== undefined) {
                        $("#SupplierAdditional").empty().html(html.message).slideDown(1000);
                    } else {
                        $("#SupplierAdditional").empty().slideUp(1000);
                    }
                });
            } else {
                $("#SupplierAdditional").empty().slideUp(1000);
            }
        });

        var additionalFields = ["VISA CHECK", "E-MAIL", "STUDENT VISA", "TOURIST VISA", "TKT+MP", "NEW TICKET", "RE-CONFIRM", "DATE CHANGE", "CONFIRM"];
        $("#ServiceId").on("change", function () {
            $(".pickDate").datepicker("destroy");
            var serviceName = $("#ServiceId :selected").text();
            var id = $(this).val();
            if (id === "") return;
            if (additionalFields.indexOf(serviceName) !== -1) {
                $.post("@Url.Action("GetAdditionalServiceFields", "Clients")", { id: id, serviceName: serviceName }, function(html) {
                    if (html !== null && html.message !== undefined) {
                        $("#ServiceAdditional").empty().html(html.message).slideDown(1000);
                        $(".pickDate").datepicker({ autoclose: true, todayHighlight: true, format: "yyyy-MM-dd" });
                    } else {
                        $("#ServiceAdditional").empty().slideUp(1000);
                    }
                });
            } else {
                $("#ServiceAdditional").empty().slideUp(1000);
            }

        });
    </script>
}

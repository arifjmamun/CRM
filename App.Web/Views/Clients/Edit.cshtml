@model App.Entity.Models.ClientInfo

@{
    ViewBag.Title = "Edit Client";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section AdditionalStyles
{
    <link href="~/vendor/bootstrap-datepicker/dist/css/bootstrap-datepicker.min.css" rel="stylesheet" />
    <link href="~/vendor/select2/dist/css/select2.min.css" rel="stylesheet" />
}
<div class="card">
    <h6 class="card-header bg-primary">CLIENTS / EDIT</h6>
    <div class="card-block">
        @using (Html.BeginForm("Edit", "Clients", FormMethod.Post, new { @class = "form-horizontal", @id = "clientForm" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Id)

            <div class="form-group row">
                @Html.LabelFor(model => model.BranchId, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.BranchId, (SelectList)ViewBag.BranchList, "Select One", new { @class = "form-control select2" })
                    @Html.ValidationMessageFor(model => model.BranchId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.ReferralType, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.ReferralType, (SelectList)ViewBag.ReferralTypes, "Select One", new { @class = "form-control select2" })
                    @Html.ValidationMessageFor(model => model.ReferralType, "", new { @class = "text-danger" })
                </div>
            </div>

            <div id="ReferralAdditional"> </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.SmsNo, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.EditorFor(model => model.SmsNo, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.SmsNo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.Label("Require Supplier", htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.DropDownList("RequireSupplier", (SelectList)ViewBag.IsRequireSupplier, new { @class = "form-control select2", @required = "required" })
                    @Html.ValidationMessage("RequireSupplier", "", new { @class = "text-danger" })
                </div>
            </div>

            <div id="SupplierAdditional"> </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.ServiceId, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.ServiceId, (SelectList)ViewBag.ServiceList, "Select One", new { @class = "form-control select2", })
                    @Html.ValidationMessageFor(model => model.ServiceId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div id="ServiceAdditional">
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.ServiceCharge, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.EditorFor(model => model.ServiceCharge, new { htmlAttributes = new { @class = "form-control", @type = "number" } })
                    @Html.ValidationMessageFor(model => model.ServiceCharge, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.Cost, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.EditorFor(model => model.Cost, new { htmlAttributes = new { @class = "form-control", @type = "number" } })
                    @Html.ValidationMessageFor(model => model.Cost, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.Profit, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.EditorFor(model => model.Profit, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @type = "number" } })
                    @Html.ValidationMessageFor(model => model.Profit, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.Discount, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control", @type = "number" } })
                    @Html.ValidationMessageFor(model => model.Discount, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.DoneBy, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.EditorFor(model => model.DoneBy, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DoneBy, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.Remark, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.TextAreaFor(model => model.Remark, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.WorkingStatus, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.WorkingStatus, (SelectList)ViewBag.WorkingStatusList, "Select One", new { @class = "form-control select2", })
                    @Html.ValidationMessageFor(model => model.WorkingStatus, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.SmsConfirmation, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.SmsConfirmation, (SelectList)ViewBag.SmsConfirmationList, "Select One", new { @class = "form-control select2" })
                    @Html.ValidationMessageFor(model => model.SmsConfirmation, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.InfoStatus, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.InfoStatus, (SelectList)ViewBag.InfoStatusList, "Select One", new { @class = "form-control", })
                    @Html.ValidationMessageFor(model => model.InfoStatus, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.DeliveryStatus, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.DeliveryStatus, (SelectList)ViewBag.DeliveryStatusList, "Select One", new { @class = "form-control select2" })
                    @Html.ValidationMessageFor(model => model.DeliveryStatus, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.Status, (SelectList)ViewBag.StatusList, "Select One", new { @class = "form-control select2" })
                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                <div class="offset-sm-4 col-sm-4">
                    <button type="submit" class="btn btn-success pull-right"> <span class="fa fa-plus"></span> Save Changes </button>
                </div>
            </div>
        }
        <div class="col-md-3">
            <a href="@Url.Action("Index")" class="btn btn-info"> <span class="fa fa-chevron-left"></span> Back to List</a>
        </div>

    </div>
</div>

@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
    <script src="~/vendor/bootstrap-datepicker/dist/js/bootstrap-datepicker.min.js"></script>
    <script src="~/vendor/select2/dist/js/select2.min.js"></script>
    <script>
        var additionalFields = ["VISA CHECK", "E-MAIL", "STUDENT VISA", "TOURIST VISA", "TKT+MP", "NEW TICKET", "RE-CONFIRM", "DATE CHANGE", "CONFIRM"];
        var id = $("#Id").val();
        //$(".select2").select2();
        function GetAdditionalReferralType() {
            var referralType = $("#ReferralType").val();
            $("#SmsNo").val("");
            if (referralType !== "" && id !== "") {
                $.post("@Url.Action("GetAdditionalReferralFields", "Clients")", { referralType: referralType, id: id }, function (html) {

                    // ReSharper disable once QualifiedExpressionMaybeNull
                    if (html !== null) {
                        $("#ReferralAdditional").empty().html(html).slideDown(500);
                        $(".select2").select2();
                        ReValidate();
                        return;
                    }
                    $("#ReferralAdditional").empty().slideUp(500);
                    return;
                });
            }
            $("#ReferralAdditional").empty().slideUp(500);
        }

        function GetAdditionalSupplierFields() {
            var requireSupplier = $("#RequireSupplier").val();
            if (requireSupplier !== "" && Number(requireSupplier) === 1 && id !== "") {
                $.post("@Url.Action("GetAdditionalSupplierFields", "Clients")", { requireSupplier: requireSupplier, id: id }, function (html) {
                    // ReSharper disable once QualifiedExpressionMaybeNull
                    if (html !== null) {
                        $("#SupplierAdditional").empty().html(html).slideDown(500);
                        $(".select2").select2();
                        ReValidate();
                        return;
                    }
                    $("#SupplierAdditional").empty().slideUp(500);
                    return;
                });
            }
            $("#SupplierAdditional").empty().slideUp(500);
        }

        function GetAdditionalServiceFields() {
            $(".pickDate").datepicker("destroy");
            var serviceName = $("#ServiceId :selected").text();
            var serviceId = $("#ServiceId").val();
            if (serviceId === "") return;
            if (additionalFields.indexOf(serviceName) !== -1 && id !== "") {
                $.post("@Url.Action("GetAdditionalServiceFields", "Clients")", { id: id, serviceId: serviceId, serviceName: serviceName }, function (html) {
                    // ReSharper disable once QualifiedExpressionMaybeNull
                    if (html !== null) {
                        $("#ServiceAdditional").empty().html(html).slideDown(500);
                        $(".select2").select2();
                        ReValidate();
                        $(".pickDate").datepicker({
                            autoclose: true, format: "yyyy-mm-dd", setDate: "d"
                        });
                        return;
                    }
                    $("#ServiceAdditional").empty().slideUp(500);
                    return;
                });
            }
            $("#ServiceAdditional").empty().slideUp(500);
        }

        function ReValidate() {
            var form = $("#clientForm");
            form.removeData('validator');
            form.removeData('unobtrusiveValidation');
            $.validator.unobtrusive.parse("#clientForm");
        }

        function CalculateProfit() {
            var serviceChage = $("#ServiceCharge").val();
            var cost = $("#Cost").val();
            if (serviceChage < 0 || cost < 0) return;
            if (serviceChage !== "" && cost !== "") {
                var profit = Number(serviceChage) - Number(cost);
                $("#Profit").val(profit); return;
            }
            else if (serviceChage === "" && cost !== "") {
                $("#Profit").val((-Number(cost))); return;
            }
            $("#Profit").val(0.00);
        }

        $(function () {

            GetAdditionalReferralType();
            GetAdditionalSupplierFields();
            GetAdditionalServiceFields();

            $(".pickDate").datepicker({
                autoclose: true,
                format: "yyyy-mm-dd",
                setDate: "d"
            }).on("changeDate", function () {
                $(this).valid();
            });
            $(".select2").select2();
            $(".select2").on("select2:close", function () {
                $(this).valid();
            });

            $("#ReferralType").on("change", function () {
                GetAdditionalReferralType();
            });

            $("#RequireSupplier").on("change", function () {
                GetAdditionalSupplierFields();
            });

            $("#ServiceId").on("change", function () {
                GetAdditionalServiceFields();
            });

            $("body").on("change", "#ContactNo", function () {
                var contactNo = $("#ContactNo");
                $("#SmsNo").val(contactNo.val()).trigger("blur");
            });

            $("body").on("change keyup", "#ServiceCharge", function () {
                CalculateProfit();
            });

            $("body").on("change keyup", "#Cost", function () {
                CalculateProfit();
            });
        });
    </script>
}

@model App.Web.Models.ClientPaymentViewModel
@{
    ViewBag.Title = "Client Payment";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var options = new AjaxOptions
    {
        HttpMethod = "POST",
        OnSuccess = "OnSuccess",
        OnComplete = "OnComplete",
        OnFailure = "OnFailure"
    };
}
@section AdditionalStyles
{
    <link href="~/vendor/toastr/toastr.min.css" rel="stylesheet" />
    <link href="~/vendor/bootstrap-datepicker/dist/css/bootstrap-datepicker.min.css" rel="stylesheet" />
    <link href="~/vendor/select2/dist/css/select2.min.css" rel="stylesheet" />
    <link href="~/Content/custom.css" rel="stylesheet" />
}
<div class="card">
    <h6 class="card-header bg-primary">BILLING / CLIENT PAYMENTS</h6>
    <div class="card-block">
        @using (Ajax.BeginForm("ClientPayment", "Billing", null, options, new { @class = "form-horizontal", @id = "clientPaymentForm" }))
        {
            <div class="card">
                <div class="card-block">
                    <div class="row">

                        <div class="col-md-6">
                            @if (User.IsInRole("Admin"))
                            {
                                <div class="form-group col-md-12">
                                    @Html.LabelFor(model => model.BranchId, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                                    <div class="col-sm-8">
                                        @Html.DropDownListFor(model => model.BranchId, (SelectList)ViewBag.BranchList, "Select One", new { @class = "form-control select2" })
                                        @Html.ValidationMessageFor(model => model.BranchId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            }
                            <div class="form-group col-md-12">
                                @Html.LabelFor(model => model.CustomerId, htmlAttributes: new { @class = "control-label col-sm-4 text-md-right" })
                                <div class="col-sm-8">
                                    @Html.DropDownListFor(model => model.CustomerId, (SelectList)ViewBag.ClientList, "Select One", new { @class = "form-control select2" })
                                    @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-group col-md-12">
                                @Html.LabelFor(model => model.ServiceAmount, htmlAttributes: new { @class = "control-label col-sm-6 text-md-right" })
                                <div class="col-sm-6">
                                    @Html.TextBoxFor(model => model.ServiceAmount, null, new { @class = "form-control", @readonly = "readonly", @type = "number" })
                                    @Html.ValidationMessageFor(model => model.ServiceAmount, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group col-md-12">
                                @Html.LabelFor(model => model.PaidAmount, htmlAttributes: new { @class = "control-label col-sm-6 text-md-right" })
                                <div class="col-sm-6">
                                    @Html.TextBoxFor(model => model.PaidAmount, null, new { @class = "form-control", @readonly = "readonly", @type = "number" })
                                    @Html.ValidationMessageFor(model => model.PaidAmount, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-md-12">
                                @Html.LabelFor(model => model.DueAmount, htmlAttributes: new { @class = "control-label col-sm-6 text-md-right" })
                                <div class="col-sm-6">
                                    @Html.TextBoxFor(model => model.DueAmount, null, new { @class = "form-control", @readonly = "readonly", @type = "number" })
                                    @Html.ValidationMessageFor(model => model.DueAmount, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                    </div>

                </div>
            </div>

            <div id="clientPaymentAdditional">

            </div>

        }
        <br />
        <table class="table table-bordered table-striped" id="clientPaymentInfoTable">
            <thead>
                <tr>
                    <th>Payment Made By</th>
                    <th>Payment Date</th>
                    <th>Payment Amount</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td colspan="3" align="center">No matching record found.</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/mvcfoolproof.unobtrusive.min.js"></script>
    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
    <script src="~/vendor/bootstrap-datepicker/dist/js/bootstrap-datepicker.min.js"></script>
    <script src="~/vendor/select2/dist/js/select2.min.js"></script>
    <script src="~/vendor/toastr/toastr.min.js"></script>
    <script>
        $(".select2").select2();
        $(".pickDate").datepicker();

        function ReValidate() {
            var form = $("#clientPaymentForm");
            form.removeData("validator");
            form.removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse("#clientPaymentForm");
        }

        function ClearFields() {
            $("#ServiceAmount").val('');
            $("#PaidAmount").val('');
            $("#DueAmount").val('');
            $("#PaymentDate").val('');
            $("#PaymentAmount").val('');
        }

        function ClearTableData() {
            $("#clientPaymentInfoTable tbody").html(
                '<tr>' +
                    '<td colspan="3" align="center">No matching record found.</td>' +
                '</tr>'
            );
        }

        function GetClientPaymentInfo(value) {
            if (value !== "") {
                $.get("@Url.Action("GetServiceChargeInfo", "Billing")", { customerId: value }, function (resp) {
                    if (resp.Flag) {
                        $("#ServiceAmount").val(resp.TotalServiceCharge);
                        $("#PaidAmount").val(resp.TotalPaid);
                        $("#DueAmount").val(resp.Due);
                    }
                    if (resp.IsDueExist) {
                        $(".pickDate").datepicker("destroy");
                        $.get("@Url.Action("GetPaymentFields","Billing")", function (html) {
                            if (html === null) return;
                            $("#clientPaymentAdditional").html(html).slideDown(500);
                            $("#paymentFields").hide();
                            $(".pickDate").datepicker({
                                autoclose: true,
                                format: "yyyy-mm-dd",
                                setDate: "d"
                            });
                            ReValidate();
                        });
                    } else {
                        $("#clientPaymentAdditional").empty().slideDown(500);
                    }

                    var tbody = $("#clientPaymentInfoTable tbody");
                    if (resp.Payments !== null) {
                        tbody.empty();
                        $.each(resp.Payments, function (index, payment) {
                            tbody.append(
                                '<tr>' +
                                    '<td>' + payment.PaymnentMadeBy + '</td>' +
                                    '<td>' + payment.PaymentDate + '</td>' +
                                    '<td>' + payment.PaymentAmount + '</td>' +
                                '</tr>'
                            );
                        });
                        tbody.append(
                            '<tr>' +
                                '<td colspan="2" align="right">Total:</td>' +
                                '<td>' + resp.TotalPaid + '</td>' +
                            '</tr>'
                        );
                    }
                    else {
                        ClearTableData();
                    }
                });
                return true;
            }
            return false;
        }

        function OnBegin() {
            //alert('On Begin');
            console.log('On Begin');
        }

        function OnComplete() {
            //alert('On Completed');
            //console.log('On Completed');
        }

        function OnSuccess(resp) {
            console.log(resp);
            if (resp.Flag) {
                toastr.success(resp.Msg, 'Success!');
            }
            else
            {
                toastr.error(resp.Msg, 'Error!');
            }
            var value = $("#CustomerId").val();
            ClearFields();
            if (!GetClientPaymentInfo(value)) $("#clientPaymentAdditional").empty();
        }

        function OnFailure() {
            //alert('On Failure');
            console.log('On Failure');
        }

        $("#BranchId").change(function () {
            var value = $(this).val();

            ClearFields();
            ClearTableData();
            //$("#clientPaymentAdditional").empty();

            if (value !== "") {
                $.get("@Url.Action("GetClientsBranchWise", "Billing")", { branchId: value }, function (resp) {
                    if (resp.Flag) {
                        $("#CustomerId").empty().html("<option value>Select One</option>");
                        $.each(resp.Clients,
                            function (key, item) {
                                $("<option>").attr("value", item.Value).html(item.Text).appendTo("#CustomerId");
                            });
                    } else {
                        $("#CustomerId").empty().html("<option value>Select One</option>");
                        $("#clientPaymentAdditional").empty();
                    }
                });
                return;
            }
            $("#clientPaymentAdditional").empty();
        });

        $("#CustomerId").change(function () {
            var value = $(this).val();

            ClearFields();
            ClearTableData();

            if (!GetClientPaymentInfo(value)) $("#clientPaymentAdditional").empty();
        });

        $("body").on("click", "#addPaymentBtn", function () {
            $("#paymentFields").slideToggle(500);
        });
    </script>
}

